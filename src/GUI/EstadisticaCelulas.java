/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import Grouping.Calculus;
import Images.AbstractImage;
import Images.PlotClusters;
import Threads.BlackBoard;
import java.awt.Color;//mod
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CreationHelper;
//import java.util.* ;
//import javax.swing.JFileChooser;
//import javax.swing.filechooser.FileNameExtensionFilter;

/**
*Es la ventana donde se muestran los resultados del conteo sobre la imagen original.
* Tambien es posible mostrar los resultados sobre la imagen con distinto zoom, sobre la imagen separada o sobre la imagen filtrada.
* Tambien permite la edición de los resultados del conteo y finalmente el almacenamiento tanto en formato excel, asi como de la imágen que se muestra en la vista.
 * 
 * @author Gonzalo
 */
public class EstadisticaCelulas extends javax.swing.JFrame {   
    TreeMap<Point,Integer> Clusters;
    //Variables internas
    String Tipo;
    int tamMax=0;//mod
    int tamMin=10000;//mod
    int poblacion;//mod
    int promedio;//mod
    
    //Dimesiones de distintas imagenes para conversiones
    int anchoOr;
    int altoOr;
    int anchoView;
    int altoView;
    int anchoConteo;
    int altoConteo;
    double zoom;
       
    
    //Mostrar en Frame
    BufferedImage IOriginal;//mod
    BufferedImage ISeparada;
    BufferedImage IFiltrada;
    BufferedImage IZoom;
    BufferedImage IVista;
    DefaultListModel listaFrame;//lista para mostrar en pantalla, stings
    
    int startX, startY, endX , endY ,minX, minY;
    Rectangle captureRect;
    
    //Variables para excell
    String lblCelulaT;
    HSSFWorkbook libro; 
    HSSFSheet hoja;
    HSSFRow fila;
    HSSFCell  celda;
       
    /**
     *Constructor sin parametros de EstadisticaCelulas, solo instancia la lista que se muestra para poder asignarle valores posteriormente
     */
    public EstadisticaCelulas() {
        listaFrame= new DefaultListModel();
        initComponents();
        CheckLanguage();
    }
    
    public void CheckLanguage(){
        if(Languages.language == Languages.Language.Spanish){
            MenuArchivo.setText("Archivo");
            MenuOpciones.setText("Opciones");
            MenuGuardar.setText("Guardar");
            GuardaImagen.setText("Imagen");
            MenuFondo.setText("Fondo");
            Original.setText("Imagen Original");
            Separada.setText("Imagen Separada");
            Filtrada.setText("Imagen Filtrada");
            Poblacion.setText("Poblacion:");
            Maximo.setText("Tamaño Maximo:");
            Minimo.setText("Tamaño Minimo:");
            Promedio.setText("Promedio:");
            BotonGrafica.setText("Graficar Clusters");
            Añade.setText("Añadir");
            Añade.setToolTipText("Añade fibras con un solo click");
            AñadeArea.setText("Añadir con area");
            AñadeArea.setToolTipText("Haz un recuadro sobre la fibra");
            Borra.setText("Borrar");
            Borra.setToolTipText("Haz un recuadro sobre las fibras a eliminar");
        }else if(Languages.language == Languages.Language.English){
            MenuArchivo.setText("File");
            MenuOpciones.setText("Options");
            MenuGuardar.setText("Save");
            GuardaImagen.setText("Image");
            MenuFondo.setText("Background");
            Original.setText("Original Image");
            Separada.setText("Split Image");
            Filtrada.setText("Filtered Image");
            Poblacion.setText("Population:");
            Maximo.setText("Maximum Size:");
            Minimo.setText("Minimum Size:");
            Promedio.setText("Average:");
            BotonGrafica.setText("Draw Clusters");
            Añade.setText("Add");
            Añade.setToolTipText("Add fibers with only one click");
            AñadeArea.setText("Add with area");
            AñadeArea.setToolTipText("Draw a square on the fiber");
            Borra.setText("Delete");
            Borra.setToolTipText("Draw a square on the fibers to be deleted");
        } 
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImagSelec = new javax.swing.ButtonGroup();
        Acciones = new javax.swing.ButtonGroup();
        Zoom = new javax.swing.ButtonGroup();
        LabelTipo = new javax.swing.JLabel();
        Poblacion = new javax.swing.JLabel();
        Maximo = new javax.swing.JLabel();
        Minimo = new javax.swing.JLabel();
        Promedio = new javax.swing.JLabel();
        lblPoblacion = new javax.swing.JLabel();
        lblTamMax = new javax.swing.JLabel();
        lblTamMin = new javax.swing.JLabel();
        lblPromedio = new javax.swing.JLabel();
        ScrollList = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        ClustersL = new javax.swing.JLabel();
        ScrollView = new javax.swing.JScrollPane();
        ViewLabel = new javax.swing.JLabel();
        BotonGrafica = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Borra = new javax.swing.JRadioButton();
        AñadeArea = new javax.swing.JRadioButton();
        Añade = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuArchivo = new javax.swing.JMenu();
        MenuGuardar = new javax.swing.JMenu();
        GuardaImagen = new javax.swing.JMenuItem();
        guardaExcel = new javax.swing.JMenuItem();
        MenuOpciones = new javax.swing.JMenu();
        MenuFondo = new javax.swing.JMenu();
        Original = new javax.swing.JRadioButtonMenuItem();
        Separada = new javax.swing.JRadioButtonMenuItem();
        Filtrada = new javax.swing.JRadioButtonMenuItem();
        MenuZoom = new javax.swing.JMenu();
        z100 = new javax.swing.JRadioButtonMenuItem();
        z75 = new javax.swing.JRadioButtonMenuItem();
        z50 = new javax.swing.JRadioButtonMenuItem();
        z25 = new javax.swing.JRadioButtonMenuItem();
        z10 = new javax.swing.JRadioButtonMenuItem();
        z05 = new javax.swing.JRadioButtonMenuItem();
        z03 = new javax.swing.JRadioButtonMenuItem();
        Vertical = new javax.swing.JCheckBoxMenuItem();
        Horizontal = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(924, 726));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        LabelTipo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        LabelTipo.setText("Imagen");

        Poblacion.setText("Poblacion: ");

        Maximo.setText("Tamaño Maximo:");

        Minimo.setText("Tamaño Minimo:");

        Promedio.setText("Promedio:");

        lblPoblacion.setText("jLabel6");

        lblTamMax.setText("jLabel6");

        lblTamMin.setText("jLabel6");

        lblPromedio.setText("jLabel6");

        jList1.setModel(listaFrame);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        ScrollList.setViewportView(jList1);

        ClustersL.setText("Clusters:");

        ScrollView.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ScrollView.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                ScrollViewMouseDragged(evt);
            }
        });
        ScrollView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ScrollViewMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ScrollViewMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ScrollViewMouseReleased(evt);
            }
        });
        ScrollView.setViewportView(ViewLabel);

        BotonGrafica.setText("Graficar Clusters");
        BotonGrafica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGraficaActionPerformed(evt);
            }
        });

        Acciones.add(Borra);
        Borra.setText("Borrar");
        Borra.setToolTipText("Haz un recuadro sobre las fibras a eliminar");

        Acciones.add(AñadeArea);
        AñadeArea.setText("Añadir con area");
        AñadeArea.setToolTipText("Haz un recuadro sobre la fibra");

        Acciones.add(Añade);
        Añade.setSelected(true);
        Añade.setText("Añadir");
        Añade.setToolTipText("Añade fibras con un solo click");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AñadeArea)
                    .addComponent(Borra)
                    .addComponent(Añade))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Añade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AñadeArea, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Borra)
                .addContainerGap())
        );

        MenuArchivo.setText("Archivo");

        MenuGuardar.setText("Guardar");

        GuardaImagen.setText("Imagen");
        GuardaImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardaImagenActionPerformed(evt);
            }
        });
        MenuGuardar.add(GuardaImagen);

        guardaExcel.setText("Excel");
        guardaExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardaExcelActionPerformed(evt);
            }
        });
        MenuGuardar.add(guardaExcel);

        MenuArchivo.add(MenuGuardar);

        jMenuBar1.add(MenuArchivo);

        MenuOpciones.setText("Opciones");

        MenuFondo.setText("Fondo");

        ImagSelec.add(Original);
        Original.setSelected(true);
        Original.setText("Imagen Original");
        Original.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OriginalActionPerformed(evt);
            }
        });
        MenuFondo.add(Original);

        ImagSelec.add(Separada);
        Separada.setText("Imagen Separada");
        Separada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeparadaActionPerformed(evt);
            }
        });
        MenuFondo.add(Separada);

        ImagSelec.add(Filtrada);
        Filtrada.setText("Imagen Filtrada");
        Filtrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltradaActionPerformed(evt);
            }
        });
        MenuFondo.add(Filtrada);

        MenuOpciones.add(MenuFondo);

        MenuZoom.setText("Zoom");

        Zoom.add(z100);
        z100.setSelected(true);
        z100.setText("100%");
        z100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                z100ActionPerformed(evt);
            }
        });
        MenuZoom.add(z100);

        Zoom.add(z75);
        z75.setText("75%");
        z75.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                z75ActionPerformed(evt);
            }
        });
        MenuZoom.add(z75);

        Zoom.add(z50);
        z50.setText("50%");
        z50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                z50ActionPerformed(evt);
            }
        });
        MenuZoom.add(z50);

        Zoom.add(z25);
        z25.setText("25%");
        z25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                z25ActionPerformed(evt);
            }
        });
        MenuZoom.add(z25);

        Zoom.add(z10);
        z10.setText("10%");
        z10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                z10ActionPerformed(evt);
            }
        });
        MenuZoom.add(z10);

        Zoom.add(z05);
        z05.setText("5%");
        z05.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                z05ActionPerformed(evt);
            }
        });
        MenuZoom.add(z05);

        Zoom.add(z03);
        z03.setText("3%");
        z03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                z03ActionPerformed(evt);
            }
        });
        MenuZoom.add(z03);

        Zoom.add(Vertical);
        Vertical.setText("Vertical");
        Vertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerticalActionPerformed(evt);
            }
        });
        MenuZoom.add(Vertical);

        Zoom.add(Horizontal);
        Horizontal.setText("Horizontal");
        Horizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HorizontalActionPerformed(evt);
            }
        });
        MenuZoom.add(Horizontal);

        MenuOpciones.add(MenuZoom);

        jMenuBar1.add(MenuOpciones);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Maximo)
                            .addComponent(Poblacion))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblTamMax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPoblacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Minimo)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTamMin, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPromedio, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Promedio)
                    .addComponent(ClustersL)
                    .addComponent(ScrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotonGrafica))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelTipo)
                    .addComponent(ScrollView, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Poblacion)
                    .addComponent(lblPoblacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Maximo)
                    .addComponent(lblTamMax))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Minimo)
                    .addComponent(lblTamMin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Promedio)
                    .addComponent(lblPromedio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClustersL)
                .addGap(12, 12, 12)
                .addComponent(ScrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotonGrafica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(LabelTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollView))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    
    private void BotonGraficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGraficaActionPerformed
        // TODO add your handling code here:
        upgradeView();
    }//GEN-LAST:event_BotonGraficaActionPerformed

    
    
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        //PlotClusters.PlotCluster(jPanel2.getGraphics(), clusters, nClusters,jPanel2.getHeight(),jPanel2.getWidth(),alto,ancho,jList1.getSelectedIndex());
    }//GEN-LAST:event_jList1ValueChanged

    private void guardaExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardaExcelActionPerformed
        // TODO add your handling code here:
        //No modificar
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        //TODO: Show JOption pane to ask 
        float objetivo = 1.0f;
        String objetivoJOptionPane;
        objetivoJOptionPane = JOptionPane.showInputDialog(this,"Introduzca el zoom del objetivo \n Es importante para calcular el área en pixeles \n Comunmente son de 4x o 10x \nIntroduzca un numero, si no esta seguro introduzca 1","Objetivo",JOptionPane.QUESTION_MESSAGE);
        if(objetivoJOptionPane != null && objetivoJOptionPane.length()>0){
            try{
                int objint=Integer.parseInt(objetivoJOptionPane);
                //Segun datos obtenidos de imagenes con escalas se llegó a la conclusion que el microscopio con un zoom de 1x tendria una relacion de 1px=3 micras
                objetivo = 3f/objint;
            }catch(java.lang.NumberFormatException ex){
                 JOptionPane.showMessageDialog(this, "Operacion no concluyo\n Introduzaca un valor numerico de objetivo valido");
                setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                 return ;
            }
            
            
            libro = new HSSFWorkbook();
            CreationHelper createHelper=libro.getCreationHelper();
            hoja=libro.createSheet(""+this.Tipo);

            fila=hoja.createRow(0);
            celda=fila.createCell(0);
            celda.setCellValue(createHelper.createRichTextString("X"));
            celda=fila.createCell(1);
            celda.setCellValue(createHelper.createRichTextString("Y"));
            celda=fila.createCell(2);
            celda.setCellValue(createHelper.createRichTextString("Dimensiones"));
            celda=fila.createCell(3);
            celda.setCellValue(createHelper.createRichTextString("Area"));
            celda=fila.createCell(4);
            celda.setCellValue(createHelper.createRichTextString("Area Micras"));

            int c=1;
            for(Map.Entry<Point,Integer> entry : Clusters.entrySet()){
                fila=hoja.createRow(c);
                    celda=fila.createCell(0);
                    celda.setCellValue(entry.getKey().x*anchoOr/anchoConteo);
                    celda=fila.createCell(1);
                    celda.setCellValue(entry.getKey().y*altoOr/altoConteo);

                    celda=fila.createCell(2);
                    if(c==1){
                        celda.setCellValue(anchoOr);
                    }
                    if(c==2){
                        celda.setCellValue(altoOr);
                    }
                    celda=fila.createCell(3);
                    celda.setCellValue((int)entry.getValue()*(anchoOr/anchoConteo)*(altoOr/altoConteo));
                    celda=fila.createCell(4);
                    celda.setCellValue((int)(entry.getValue()*(anchoOr/anchoConteo)*(altoOr/altoConteo)*objetivo*objetivo));
                c++;
            }
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filtroEx = new FileNameExtensionFilter("XLS", "xls");
            chooser.setFileFilter(filtroEx);
            chooser.setCurrentDirectory(BlackBoard.getImagePath());
            int retrival = chooser.showSaveDialog(null);
            if (retrival == JFileChooser.APPROVE_OPTION) {
                try
                {
                    FileOutputStream fichero = new FileOutputStream(chooser.getSelectedFile()+".xls");
                    libro.write(fichero);
                    fichero.close();
                }
                catch (Exception ex)
                {
                    ex.printStackTrace();
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "Operacion no concluyo");
        }
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_guardaExcelActionPerformed

    private void GuardaImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardaImagenActionPerformed
        // TODO add your handling code here:
           AbstractImage.guardar(IVista);        
    }//GEN-LAST:event_GuardaImagenActionPerformed

    private void SeparadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeparadaActionPerformed
        MenuZoom.setEnabled(false);
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_SeparadaActionPerformed

    private void OriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OriginalActionPerformed
        MenuZoom.setEnabled(true);
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_OriginalActionPerformed

    private void ScrollViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ScrollViewMouseClicked
        //REVISAR***********************************************************************************************************************
        int corx=evt.getX()+ScrollView.getHorizontalScrollBar().getValue();
            int cory=evt.getY()+ScrollView.getVerticalScrollBar().getValue();
            corx=(int)((corx*anchoConteo)/anchoView);
            cory=(int)((cory*altoConteo)/altoView);
        if(Añade.isSelected()){
            //System.out.println("MouseClicked")
            anexar(new Point(corx,cory),1); 
        }else if(Borra.isSelected()){
            for(int i=-4;i<=4;i++){
                for(int j=-4;j<=4;j++){
                    eliminar(new Point(corx+i,cory+j));
                }
            }
            upgradeClusters();
            upgradeView();
        }
        //si no es exacta buscar clusters mas cercanos!!MAñana
    }//GEN-LAST:event_ScrollViewMouseClicked

    private void z100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_z100ActionPerformed
        // TODO add your handling code here:
        zoom=1.0;
        upgradeZoomImage();
        upgradeView();
        
    }//GEN-LAST:event_z100ActionPerformed

    private void z25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_z25ActionPerformed
        // TODO add your handling code here:
        zoom=0.25;
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_z25ActionPerformed

    private void z50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_z50ActionPerformed
        // TODO add your handling code here:
        zoom=0.5;
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_z50ActionPerformed

    private void z10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_z10ActionPerformed
        // TODO add your handling code here:
        zoom=0.1;
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_z10ActionPerformed

    private void z75ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_z75ActionPerformed
        // TODO add your handling code here:
        zoom=0.75;
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_z75ActionPerformed

    private void z05ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_z05ActionPerformed
        // TODO add your handling code here:
        zoom=0.05;
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_z05ActionPerformed

    private void z03ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_z03ActionPerformed
        // TODO add your handling code here:
        zoom=0.03;
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_z03ActionPerformed

    private void HorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HorizontalActionPerformed
        // TODO add your handling code here:
        zoom=Math.pow(ScrollView.getWidth(),2)/Math.pow(anchoOr,2);
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_HorizontalActionPerformed

    private void VerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerticalActionPerformed
        // TODO add your handling code here     
        zoom=Math.pow(ScrollView.getHeight(),2)/Math.pow(altoOr,2);
        upgradeZoomImage();
        upgradeView();
        
    }//GEN-LAST:event_VerticalActionPerformed

    private void ScrollViewMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ScrollViewMouseDragged
        // TODO add your handling code here:
        if(AñadeArea.isSelected() || Borra.isSelected()){
            endX = evt.getX()+ScrollView.getHorizontalScrollBar().getValue();
            endY = evt.getY()+ScrollView.getVerticalScrollBar().getValue();
        //Arreglar cuando el punto final esta a la izquierda del inical;
        minX = startX < endX ? startX : endX;
        minY = startY < endY ? startY : endY;
                //Crea el objeto rectangulo
                captureRect = new Rectangle(new Point(minX,minY),new Dimension(Math.max(Math.abs(startX-endX),1),Math.max(Math.abs(startY-endY),1)));
                //repinta
                upgradeView();
        }
        
    }//GEN-LAST:event_ScrollViewMouseDragged

    private void FiltradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltradaActionPerformed
        // TODO add your handling code here:
        MenuZoom.setEnabled(false);
        upgradeZoomImage();
        upgradeView();
    }//GEN-LAST:event_FiltradaActionPerformed

    private void ScrollViewMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ScrollViewMouseReleased
        // TODO add your handling code here:
        if((AñadeArea.isSelected() || Borra.isSelected()) && startX!= -1 && endX!=-1){
            //System.out.println("Mouse Relased");
        int tamconvx=Math.max(1,(int)Math.abs(startX-endX)*anchoConteo/anchoView);
        int tamconvy=Math.max(1,(int)Math.abs(startY-endY)*altoConteo/altoView);
        int convX=minX*anchoConteo/anchoView;
        int convY=minY*altoConteo/altoView;
        
        if(AñadeArea.isSelected()){
            anexar(new Point((int)(convX+tamconvx/2),(int)(convY+tamconvy/2)),tamconvx*tamconvy);
        }else if(Borra.isSelected()){
            for(int x=0;x<tamconvx;x++){
                for(int y=0; y<tamconvy;y++){
                    eliminar(new Point(convX + x, convY+y));
                }
            }
            upgradeClusters();
        }
        captureRect = null;
        upgradeView();
        }
        startX = -1;
        endX=-1;
        
    }//GEN-LAST:event_ScrollViewMouseReleased

    private void ScrollViewMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ScrollViewMousePressed
        // TODO add your handling code here:
        if(Borra.isSelected() || AñadeArea.isSelected()){
            startX = evt.getX()+ScrollView.getHorizontalScrollBar().getValue();
            startY = evt.getY()+ScrollView.getVerticalScrollBar().getValue();
            //System.out.println("Mouse pressed "+ startX + " , " + startY );
        }
        
    }//GEN-LAST:event_ScrollViewMousePressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_SPACE){
            System.out.println("Space Relased");
            if(Añade.isSelected()){
                AñadeArea.setSelected(true);
            }else if(AñadeArea.isSelected()){
                Borra.setSelected(true);
            }else if(Borra.isSelected()){
                Añade.setSelected(true);
            }   
        }
    }//GEN-LAST:event_formKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Acciones;
    private javax.swing.JRadioButton Añade;
    private javax.swing.JRadioButton AñadeArea;
    private javax.swing.JRadioButton Borra;
    private javax.swing.JButton BotonGrafica;
    private javax.swing.JLabel ClustersL;
    private javax.swing.JRadioButtonMenuItem Filtrada;
    private javax.swing.JMenuItem GuardaImagen;
    private javax.swing.JRadioButtonMenuItem Horizontal;
    private javax.swing.ButtonGroup ImagSelec;
    private javax.swing.JLabel LabelTipo;
    private javax.swing.JLabel Maximo;
    private javax.swing.JMenu MenuArchivo;
    private javax.swing.JMenu MenuFondo;
    private javax.swing.JMenu MenuGuardar;
    private javax.swing.JMenu MenuOpciones;
    private javax.swing.JMenu MenuZoom;
    private javax.swing.JLabel Minimo;
    private javax.swing.JRadioButtonMenuItem Original;
    private javax.swing.JLabel Poblacion;
    private javax.swing.JLabel Promedio;
    private javax.swing.JScrollPane ScrollList;
    private javax.swing.JScrollPane ScrollView;
    private javax.swing.JRadioButtonMenuItem Separada;
    private javax.swing.JCheckBoxMenuItem Vertical;
    private javax.swing.JLabel ViewLabel;
    private javax.swing.ButtonGroup Zoom;
    private javax.swing.JMenuItem guardaExcel;
    private javax.swing.JList jList1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblPoblacion;
    private javax.swing.JLabel lblPromedio;
    private javax.swing.JLabel lblTamMax;
    private javax.swing.JLabel lblTamMin;
    private javax.swing.JRadioButtonMenuItem z03;
    private javax.swing.JRadioButtonMenuItem z05;
    private javax.swing.JRadioButtonMenuItem z10;
    private javax.swing.JRadioButtonMenuItem z100;
    private javax.swing.JRadioButtonMenuItem z25;
    private javax.swing.JRadioButtonMenuItem z50;
    private javax.swing.JRadioButtonMenuItem z75;
    // End of variables declaration//GEN-END:variables

    private void upgradeView(){
        IVista=Calculus.Clone(IZoom);
        PlotClusters.PlotCluster(IVista, Clusters,anchoConteo,altoConteo,Tipo);
        Graphics2D g = IVista.createGraphics();
        if (captureRect!=null) {
            g.setColor(Color.RED);
            g.draw(captureRect);
            g.setColor(new Color(255,255,255,150));
            g.fill(captureRect);
        }
        g.dispose();
        ViewLabel.setIcon(new ImageIcon(IVista));
    }
    
    private void upgradeZoomImage(){
        if(Original.isSelected()){
            IZoom=Calculus.ReduceImage(IOriginal,(int)(anchoOr*altoOr*zoom));
        }else if(Separada.isSelected()){
            IZoom=Calculus.Clone(ISeparada);
        }else if(Filtrada.isSelected()){
            IZoom=Calculus.Clone(IFiltrada);
        }
        anchoView=IZoom.getWidth();
        altoView=IZoom.getHeight();
    }    
    
    /**
     *Asigna el tipo de fibra de la imagen de la que se mostraran los resultados, es importante para asignar a la hoja del archivo excel.
     * @param tipo cadena de texto con el tipo de tincion
     */
    public void setTipo(String tipo){
        Tipo=tipo;
        LabelTipo.setText("Imagen "+Tipo);
    }
    
    /**
     *Asigna las imagenes necesarias para mostrar en esta ventana, llamando los metodos individuales
     * @param original imagen original, la que se abrio desde el archivo
     * @param separada imagen con el tipo de fibra seleccionado, en la resolucion seleccionada en main
     * @param filtrada imagen con los filtros elegidos para el conteo
     */
    public void setImages(BufferedImage original, BufferedImage separada, BufferedImage filtrada){//mod
        setOriginalImage(original);
        setSeparatedImage(separada);
        setFilteredImage(filtrada);
        zoom=1.0;
        z100.setSelected(true);
        IVista=Calculus.Clone(IOriginal);
        ViewLabel.setIcon(new ImageIcon(IVista));
        upgradeZoomImage();
        upgradeView();
    }
    
    /**
     *Guarda unicamente la imagen original para mostrar
     * @param or imagen original, la que se abrio desde el archivo
     */
    public void setOriginalImage(BufferedImage or){
        IOriginal=or;
        anchoOr=IOriginal.getWidth();
        altoOr=IOriginal.getHeight();
    }
    
    /**
     *Guarda únicamente la imágen separada
     * @param separada imagen con el tipo de fibra seleccionado, en la resolucion seleccionada en main
     */
    public void setSeparatedImage(BufferedImage separada){
        ISeparada=separada;
    }
    
    /**
     * Guarda únicamente la imagen filtrada
     * @param fi imagen con los filtros elegidos para el conteo
     */
    public void setFilteredImage(BufferedImage fi){
        IFiltrada=fi;
        anchoConteo=IFiltrada.getWidth();
        altoConteo=IFiltrada.getHeight();
    }

    /**
     *Guarda la lista de resultados del algoritmo de conteo
     * @param clusterMap estructura que contiene las coordenadas de las fibras y sus tamaños
     */
    public void setClusters(TreeMap clusterMap) {
        listaFrame.clear();
        Clusters=clusterMap;
        poblacion=Clusters.size();
        upgradeClusters();
    }
    
    
    
    private final void upgradeClusters() {
        if(Languages.language == Languages.Language.Spanish){
            this.lblPoblacion.setText(""+poblacion+" fibras");
        }else if(Languages.language == Languages.Language.English){
            this.lblPoblacion.setText(""+poblacion+" fibers");
        }
        UpgradeList();
        ScrollList.setViewportView(jList1);
        upgradeMin();
        upgradeMax();
        upgradeMean();
        this.lblTamMax.setText(""+tamMax+" pxl");
        this.lblTamMin.setText(""+tamMin+" pxl");
        this.lblPromedio.setText(""+promedio+" pxl");
    }
    
    private void eliminar(Point selc){//contains -_-
        Clusters.remove(selc);
        poblacion= Clusters.size();
        //Poner upgradeClusters despues de for en metodo llamado despues de mouse draged
    }
    
    private void anexar(Point nw,int tam){//modificar usando ArrayList o algo asi
        if(!Clusters.containsKey(nw)){
            Clusters.put(nw, tam);
            poblacion=Clusters.size();
            upgradeClusters();
            upgradeView();
        }
    }
    
    private void UpgradeList(){
        listaFrame.clear();
        int i=1;
        for(Map.Entry<Point,Integer> fib : Clusters.entrySet()){
            listaFrame.addElement("Cluster "+i+" X: "+fib.getKey().x+" Y: "+fib.getKey().y + "("+ fib.getValue() + ")");
            i++;
        }
        
    }
    
    private void upgradeMax(){
        for(int v : Clusters.values()){
            if(tamMax<v){
                tamMax=v;
            }
        }
    }
    
    private void upgradeMin(){
        for(int v : Clusters.values()){
            if(tamMin>v){
                tamMin=v;
            }
        }        
    }
    
    private void upgradeMean(){
        int sum=0;
        for(int v : Clusters.values()){
           sum+=v;
        }
        if(poblacion>0){
            promedio=sum/poblacion;
        }
        else{
            promedio=sum;
        }
       
    }
    
}
